<?xml version="1.0" encoding="UTF-8"?>
<tns:Pattern name="" xmlns:tns="http://www.example.org/dirigent-pattern/"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.example.org/dirigent-pattern/ ../dirigent-pattern.xsd ">
	<Documentation>Documentation</Documentation>
	
	<PatternStep ignoreErrors="true" name="Drop Stage Table" type="JDBCStatement">
		<Template><![CDATA[    
		DROP TABLE STG_${element.targetTable.name}
    ]]>
    </Template>
	</PatternStep>
	
	<PatternStep name="Create Stage Table" type="JDBCStatement">
		<Template><![CDATA[    
		CREATE TABLE STG_${element.targetTable.name}
		(
			${element.targetColumnList}
		)
		as
		${element.SQLQuery}
    ]]>
    </Template>
	</PatternStep>
	
	
	<PatternStep name="Merge" type="JDBCStatement">
		<Template><![CDATA[ 
#set( $addRowOnChangeProperty = "addRowOnChange" )
#set( $naturalKeyProperty = "naturalKey" )


	MERGE INTO ${element.targetTable.name} target
	USING
		(
		SELECT *
		FROM STG_${element.targetTable.name}
		MINUS
			(
			SELECT ${element.targetColumnList}
			FROM ${element.targetTable.fullName}
			WHERE ${element.targetTable.alias}_VALID_TO_DATETIME > sysdate
			)
		) stage
	ON
		(
			${utils.getWhereClausule(${element.targetTable.getColumnListBySCDType(${naturalKeyProperty})}, "=", "AND", "target", "stage")}
			${utils.getWhereClausule(${element.targetTable.getColumnListBySCDType(${addRowOnChangeProperty})}, "=", "AND", "target", "stage", true)}
			AND target.${element.targetTable.alias}_VALID_TO_DATETIME > sysdate
		)
	WHEN MATCHED THEN
		UPDATE
		SET
		#foreach(${column} in ${element.targetTable.columns})
			#if( ${column.properties.scdColumnType} != ${naturalKeyProperty} and ${column.properties.scdColumnType} != ${addRowOnChangeProperty} )
				target.${column.name} = stage.${column.name},
			#end
		#end
		target.${element.targetTable.alias}_UPDATED_DATETIME = sysdate
		
	WHEN NOT MATCHED THEN
		INSERT
		(
		#foreach( ${column} in ${element.targetTable.columns} )${column.name},
		#end
    	${element.targetTable.alias}_VALID_FROM_DATETIME,
		${element.targetTable.alias}_VALID_TO_DATETIME,
		${element.targetTable.alias}_CURRENT_FLAG,
		${element.targetTable.alias}_UPDATED_DATETIME,
		${element.targetTable.alias}_KEY
    	)
    	VALUES
    	(
			#foreach( ${column} in ${element.targetTable.columns} )stage.${column.name},
			#end
    		sysdate,
   			to_date('1.1.3000','dd.mm.yyyy'),
   			'Y',
   			sysdate,
   			${element.targetTable.alias}_SEQ.NEXTVAL
    	)
    ]]>
    </Template>
	</PatternStep>
	
	<PatternStep name="end validity/delete of old record" type="JDBCStatement">
		<Template><![CDATA[    
#set( $addRowOnChangeProperty = "addRowOnChange" )
#set( $naturalKeyProperty = "naturalKey" )

#if(${element.targetTable.isColumnOfSCDType($addRowOnChangeProperty)})

	UPDATE ${element.targetTable.fullName} target
   	SET 
   		target.${element.targetTable.alias}_CURRENT_FLAG = 'N',
   		target.${element.targetTable.alias}_VALID_TO_DATETIME = sysdate
   	WHERE EXISTS
   	(
   		SELECT * from STG_${element.targetTable.name} stage
   		WHERE
   		target.${element.targetTable.alias}_VALID_TO_DATETIME > sysdate
   		AND
   		${utils.getWhereClausule(${element.targetTable.getColumnListBySCDType(${naturalKeyProperty})}, "=", "AND", "target", "stage")}   		
   		
   		#set( $writeOr = false )
   		#set( $writeAnd = true )
		#foreach(${column} in ${element.targetTable.columns})
			#if( ${column.properties.scdColumnType} == ${addRowOnChangeProperty} )
				#if( $writeAnd ) #set( $writeAnd = false ) AND ( #end
				#if( $writeOr )	OR #else #set( $writeOr = true ) #end
				target.${column.name} <> stage.${column.name}
			#end
		#end
		#if($writeAnd == false) ) #end
	)
	OR NOT EXISTS
	(
		SELECT * from STG_${element.targetTable.name} stage
   		WHERE
   		target.${element.targetTable.alias}_VALID_TO_DATETIME > sysdate
   		AND
   		${utils.getWhereClausule(${element.targetTable.getColumnListBySCDType(${naturalKeyProperty})}, "=", "AND", "target", "stage")}
	)
#else
	DELETE FROM ${element.targetTable.fullName} target
	WHERE NOT EXISTS
	(
		SELECT * from STG_${element.targetTable.name} stage
   		WHERE ${utils.getWhereClausule(${element.targetTable.getColumnListBySCDType(${naturalKeyProperty})}, "=", "AND", "target", "stage")}
	)
#end
    ]]>
    </Template>
	</PatternStep>
</tns:Pattern>
